import java.io.*;/* Terminals (tokens returned by the scanner). */terminal          PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN, END, ID, IF, WRITE, READ, RETURN, BEGIN, MAIN, INT, REAL, STRING, ELSE, SEMI, ASSIGN, GAP, COMMA, QSTRING, EQ, GE, IE, GR, INF, NE, TRUE, FALSE, BOOLEAN;terminal          NUMBER;/* Non terminals */non terminal program, main_function_declaration,if_elif_else_statement,if_elif_statement,if_else_statement, statement,function_call, expression, assignment, declaration, statements, if_statement, if_statement_body, elif_statement_body, else_statement_body, type, identifier, argument, arguments, function_declaration, argument_list_declaration, return_statement, body, function, boolean;/* Precedences */precedence left INT, REAL, STRING,ID,IF,ELSE,RETURN,WRITE,READ;precedence left PLUS, MINUS;precedence left TIMES, DIVIDE;/* Grammar rules *//* Top-level program */program ::= statements program            | statements            | function program:p {:RESULT = (int) p + 1;System.out.println(RESULT);:}            | function:f {:RESULT = "import java.io.*;\n"                            +"public class A4 {\n "                            + "static BufferedReader br;\n static BufferedWriter bw;\n static double temp;\n"                            + f + "\n}";:};function ::= function_declaration:e1 body:e2 {:RESULT = "\nstatic " + e1 + "{\n" + e2 + "\n}";:}             | function_declaration:e1 body:e2 function: rec {:RESULT = "\nstatic " + e1 + "{\n" + e2 + "\n}" + rec;:}             | main_function_declaration:e1 body:e2 {:RESULT = e1 + "{\n" + e2 + "\n}";:}             | main_function_declaration:e1 body:e2 function:e3 {:RESULT = e1 + "{\n" + e2 + "\n}" + e3 + "\n";:}             ;/* Code body */body ::= BEGIN END | BEGIN statements:e END {:RESULT = e;:};/* Statements */statements ::=  statement:e {:RESULT = e +"\n";:}               | statement:e1 statements:e2 {:RESULT = "" + e1 + e2 +"\n";:}               | if_statement:e {:RESULT = e+";\n";:}               | if_elif_statement:e {:RESULT = e+";\n";:}               | if_elif_else_statement:e {:RESULT = e+";\n";:}               | if_else_statement:e {:RESULT = e+";\n";:}               | if_statement:e1 statements:e2 {:RESULT = "" + e1 + e2 +"\n";:}               | if_elif_statement:e1 statements:e2 {:RESULT = "" + e1 + e2 +"\n";:}               | if_elif_else_statement:e1 statements:e2 {:RESULT = "" + e1 + e2 +"\n";:}               | if_else_statement:e1 statements:e2 {:RESULT = "" + e1 + e2 +"\n";:}                ;statement ::= assignment:e SEMI {:RESULT = e+";\n";:}              | declaration:e SEMI {:RESULT = e+";\n";:}              | return_statement:e SEMI {:RESULT = e+";";:}              | function_call:e SEMI {:RESULT = e+";";:}                ;/* Function Declaration */function_declaration ::= type:type ID:id LPAREN argument_list_declaration:args RPAREN {:RESULT = type + " " + id + "(" + args + ")";:}                        | type:type ID:id LPAREN RPAREN {:RESULT = type + " " + id.toString() + "()";:};/* Main Function Declaration */main_function_declaration ::= type:type MAIN ID LPAREN RPAREN {:RESULT = "\npublic static void main(String[] args) throws Exception";:};/* Assignment */assignment ::= ID:e1 ASSIGN expression:e2 {:RESULT = e1 + " = " + e2;:}            | ID:e1 ASSIGN function_call:f {:RESULT = e1 + " = " + f;:};/* Function call */function_call ::= ID:id LPAREN RPAREN{:RESULT = id + "()";:}                |ID:id LPAREN arguments:e RPAREN{:RESULT = id + "(" + e + ")";:}                | WRITE LPAREN expression:var COMMA argument:file RPAREN {:RESULT = "temp = " + var +";\n"                                                                        +"bw=new BufferedWriter(new FileWriter("+file+"));\n"                                                                        +"bw.write(\"\"+ temp);"                                                                        +"bw.close();";:}                | READ LPAREN argument:var COMMA argument:file RPAREN {:RESULT = "br = new BufferedReader(new FileReader(" + file +"));\n"                                                                                 + var + " = Integer.parseInt(br.readLine());\n";:};if_else_statement ::= if_statement:e1 else_statement_body:e2 {:RESULT = ""+e1+e2;:};if_statement ::= if_statement_body:e1 statement:e2 {:RESULT = "" + e1 + e2;:}                | if_statement_body:e1 BEGIN statements:e2 END {:RESULT = "" + e1 + "{\n" + e2 + "\n}";:}                 ;else_statement_body ::= ELSE statement:e {:RESULT = "else " + e;:}                        | ELSE BEGIN statements:e END {:RESULT = "else " + e;:}                        | ELSE if_statement:e {:RESULT = "else " + e;:}                        | ELSE if_statement:e1 else_statement_body:e2 {:RESULT = "else " + e1 + e2;:}                        ;if_statement_body ::= IF LPAREN boolean:bool RPAREN {:RESULT = "if("+bool+") ";:};/* arguments */arguments ::=  argument:e {:RESULT = e;:}              | ID:id PLUS NUMBER:n {:RESULT = id + "+" + n;:}              | ID:id PLUS NUMBER:n COMMA arguments:rec {:RESULT = id + "+" + n + "," + rec;:}              | argument:e COMMA arguments:rec {:RESULT = e + ", " + rec;:}              ;argument ::= ID:e {:RESULT = e;:}             | NUMBER:e {:RESULT = e;:}             | QSTRING:e {:RESULT = e;:}             ;/* Arguments */argument_list_declaration ::= type:type ID:id {:RESULT = type +" "+id;:}                | type:type ID:id COMMA argument_list_declaration:rec {:RESULT = type +" "+id +"," + rec;:}                ;/* Expressions */expression ::= NUMBER:n {:RESULT = n;:}             | QSTRING:s {:RESULT = s;:}             | ID:id {:RESULT = id;:}             | LPAREN expression:e RPAREN {:RESULT = "("+e+")";:}             | MINUS expression:e {:RESULT = "-"+e;:}             | expression:e1 PLUS expression:e2 {:RESULT = e1 + " + " + e2;:}             | expression:e1 MINUS expression:e2 {:RESULT = e1 + " - " + e2;:}             | expression:e1 TIMES expression:e2 {:RESULT = e1 + " * " + e2;:}             | expression:e1 DIVIDE expression:e2 {:RESULT = e1 + " / " + e2;:}             | function_call:f1 PLUS function_call:f2 {:RESULT = f1 + " + " + f2;:}             | function_call:f1 MINUS function_call:f2 {:RESULT = f1 + " - " + f2;:}             | function_call:f1 TIMES function_call:f2 {:RESULT = f1 + " * " + f2;:}             | function_call:f1 DIVIDE function_call:f2 {:RESULT = f1 + " / " + f2;:}             | function_call:f PLUS expression:e {:RESULT = f + " + " + e;:}             | function_call:f MINUS expression:e {:RESULT = f + " - " + e;:}             | function_call:f TIMES expression:e {:RESULT = f + " * " + e;:}             | function_call:f DIVIDE expression:e {:RESULT = f + " / " + e;:}             | expression:e PLUS function_call:f {:RESULT = e + " + " + f;:}             | expression:e MINUS function_call:f {:RESULT = e + " - " + f;:}             | expression:e TIMES function_call:f {:RESULT = e + " * " + f;:}             | expression:e DIVIDE function_call:f {:RESULT = e + " / " + f;:}             ;boolean ::=    expression:e1 EQ expression:e2 {:RESULT = e1 + "==" + e2;:}             | expression:e1 GE expression:e2 {:RESULT = e1 + ">=" + e2;:}             | expression:e1 IE expression:e2 {:RESULT = e1 + "<=" + e2;:}             | expression:e1 GR expression:e2 {:RESULT = e1 + ">" + e2;:}             | expression:e1 INF expression:e2 {:RESULT = e1 + "<" + e2;:}             | expression:e1 NE expression:e2 {:RESULT = e1 + "!=" + e2;:}             | TRUE {:RESULT = "true";:}             | FALSE {:RESULT = "false";:}             | BOOLEAN:e {:RESULT = e;:}             ;return_statement ::= RETURN expression:e {:RESULT = "return " + e;:};/* Declaration */declaration ::= type:e1 ID:e2 {:RESULT = e1 + " " + e2;:}               | type:e1 ID:e2 ASSIGN expression:e3 {:RESULT = e1 + " " + e2 + " = " + e3;:}               ;type ::= INT{:RESULT = "int";:}        | STRING {:RESULT = "String";:}        | REAL{:RESULT = "double";:}        ;